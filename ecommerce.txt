1. database connection, schema and schema validation (mongoose), model
2.Creating seed Router --- work as reset model
3. We have to place errorHandling code before server listen code .
   client side error handling --{
        app.use((req, res, next)=>{
            next(createError(404, "Route not found "));
        })
    }
   server side errorHandling(all errors come here) --{
        app.user((err, req, res , next)=>{
           return  res.status(err.status || 500).json({
              success : false,
              message : err.message,
           })
        }) 
   
  or we can do that 
     
     app.user((err, req, res , next)=>{
           return errorResponse(res,{
              statusCode: err.status,
              message : err.message,
           })
        }) 

   } 
  we can create another page called responserController function in controllers.js file.
      const errorResponse =(res, {statusCode = 500, message = "Internal server Error})=>{
           return res.status(statusCode).json({
               success : false;
               message : message;
           })
      }

for success response 
      
          const successResponse =(res, {statusCode=200, message = "success", payload={}}) =>{
                return res.status(statusCode).json({
               success : true;
               message : message;
               payload : payload,
           })
          }
   
4. searching for all users -{
    const search = req.query.search || "";
    const page =Number(req.query.page) || 1;
    const limit =Number(req.query.limit) || 5;
    const searchEx = new RegExp( ".*" + search + ".*", i);
    const filter = {
        isAdmin(field name) : { $ne : true},
        $or : [
            {name (field name) : {$regex : searchEx}},
            {email (field name) : {$regex : searchEx}},
            {phone (field name) : {$regex : searchEx}},
        ]
    }

   const options = {password(field name) : 0}(we don't see this password property)
    const users = await Users(model name).find(filter, options)
                 .limit(limit)  (pagination here)
                 .skip((page-1) * limit);
    const count = await Users.find(filter).countDocuments();(we count here how many document we have selected)             
    if(count === 0) throw createError(404 , "no user found");(my code)
    if(!users) throw createError(404 , "no user found");
    const res.status(200).json({
            message: "users were found",
            users: users (users),
            pagination :{
                totalPage : Math.ceil(count / limit),
                currentPage : page;
                previousPage : page-1 > 0 ? page - 1 : null,
                nextPage : page + 1 <= Math.ceil(count / limit) ? page + 1 : null,
            }
    })
}
5.get a single router by id
only controller part =={
      const getUSer =async (req, res, next)=>{
          try{
              const id = req.param.id;
              const options = {password : 0};
              const user = await Users.findById(id, options);
              if(!user){
                throw createError(404, "user not found by this id")
              }
              return successResponse(res,{
                  statusCode : 200,
                  message : user returned,
                  payload :user,
              })
          }
          catch(error){
              if(error instanceOf mongoose.error){           (if this error is of mongoose for example i give id 5 instead of 251sfs4fs2fs5sff6a)
                next(createError(400, "Invalid user id"))
              }
              throw error;
          }
      }
}
6. create a service folder and keeping reusable code here
findItem.js in service folder.
  const findWithId = async (Model,id, options={})=>{
       try{
          const item = await Model.findById(id, options);
          if(!item){throw createError(404 , `${Model.modelName} not found by the id`)};
          return item;
       }catch(error){
            if(error instanceOf mongoose.error){           (if this error is of mongoose for example i give id 5 instead of 251sfs4fs2fs5sff6a)
                next(createError(400, "Invalid user id"))
              }
              throw error;
       }
  }
7. Delete user by id;
  deleteController.js
  const deleteUser = async(req, res, next)=>{
      try{
         const id = req.param.id;
         const options = {password : 0};
         const user = await findWithId(User , id, options);
         const userImagePath = user.image (image here document's property)
         //user image deleting
         fs.access(userImagePath, (err)=>{
              if(err){
                console.log("image path not found");
              }else{
                 fs.unLink(userImagePath,(err)=>{
                     if(err) throw err;
                     console.log("user successfully deleted);
                 })
              }
         })
         //then user deleting
          await User.findByIdAndDelete({_id : id, isAdmin : false})
      }
  }



