1. database connection, schema and schema validation (mongoose), model
2.Creating seed Router --- work as reset model
3. We have to place errorHandling code before server listen code .
   client side error handling --{
        app.use((req, res, next)=>{
            next(createError(404, "Route not found "));
        })
    }
   server side errorHandling(all errors come here) --{
        app.user((err, req, res , next)=>{
           return  res.status(err.status || 500).json({
              success : false,
              message : err.message,
           })
        }) 
   
  or we can do that 
     
     app.user((err, req, res , next)=>{
           return errorResponse(res,{
              statusCode: err.status,
              message : err.message,
           })
        }) 

   } 
  we can create another page called responserController function in controllers.js file.
      const errorResponse =(res, {statusCode = 500, message = "Internal server Error})=>{
           return res.status(statusCode).json({
               success : false;
               message : message;
           })
      }

for success response 
      
          const successResponse =(res, {statusCode=200, message = "success", payload={}}) =>{
                return res.status(statusCode).json({
               success : true;
               message : message;
               payload : payload,
           })
          }
   
4. searching for all users -{
    const search = req.query.search || "";
    const page =Number(req.query.page) || 1;
    const limit =Number(req.query.limit) || 5;
    const searchEx = new RegExp( ".*" + search + ".*", i);
    const filter = {
        isAdmin(field name) : { $ne : true},
        $or : [
            {name (field name) : {$regex : searchEx}},
            {email (field name) : {$regex : searchEx}},
            {phone (field name) : {$regex : searchEx}},
        ]
    }

   const options = {password(field name) : 0}(we don't see this password property)
    const users = await Users(model name).find(filter, options)
                 .limit(limit)  (pagination here)
                 .skip((page-1) * limit);
    const count = await Users.find(filter).countDocuments();(we count here how many document we have selected)             
    if(count === 0) throw createError(404 , "no user found");(my code)
    if(!users) throw createError(404 , "no user found");
    const res.status(200).json({
            message: "users were found",
            users: users (users),
            pagination :{
                totalPage : Math.ceil(count / limit),
                currentPage : page;
                previousPage : page-1 > 0 ? page - 1 : null,
                nextPage : page + 1 <= Math.ceil(count / limit) ? page + 1 : null,
            }
    })
}
5.get a single router by id
only controller part =={
      const getUSer =async (req, res, next)=>{
          try{
              const id = req.param.id;
              const options = {password : 0};
              const user = await Users.findById(id, options);
              if(!user){
                throw createError(404, "user not found by this id")
              }
              return successResponse(res,{
                  statusCode : 200,
                  message : user returned,
                  payload :user,
              })
          }
          catch(error){
              if(error instanceOf mongoose.error){           (if this error is of mongoose for example i give id 5 instead of 251sfs4fs2fs5sff6a)
                next(createError(400, "Invalid user id"))
              }
              throw error;
          }
      }
}
6. create a service folder and keeping reusable code here
findItem.js in service folder.
  const findWithId = async (Model,id, options={})=>{
       try{
          const item = await Model.findById(id, options);
          if(!item){throw createError(404 , `${Model.modelName} not found by the id`)};
          return item;
       }catch(error){
            if(error instanceOf mongoose.error){           (if this error is of mongoose for example i give id 5 instead of 251sfs4fs2fs5sff6a)
                next(createError(400, "Invalid user id"))
              }
              throw error;
       }
  }
7. Delete user by id;
  deleteController.js
  const fs = require("fs")
  const deleteUser = async(req, res, next)=>{
      try{
         const id = req.param.id;
         const options = {password : 0};
         const user = await findWithId(User , id, options);
         const userImagePath = user.image (image here document's property)
         //user image deleting
         fs.access(userImagePath, (err)=>{
              if(err){
                console.log("image path not found");
              }else{
                 fs.unLink(userImagePath,(err)=>{
                     if(err) throw err;
                     console.log("user successfully deleted);
                 })
              }
         })
         //or
         deleteImage(userImagePath)
         //then user deleting
          await User.findByIdAndDelete({_id : id, isAdmin : false})
      }
  }

8.deleting image in helper folder (then/catch)
 const fs = require("fs").promises;
 const deleteImage = (userImagePath)=>{
      fs.access(userImagePath)
      .then(()=> fs.unLink(userImagePath))
      .then(()=> console.log("image has been deleted))
      .catch((err)=> console.error("something went wrong"))
 }
or
const deleteImage = async (userImagePath)=>{
    try{
        await fs.access(userImagePath);
        await fs.unLink(userImagePath);
        console.log("image has been deleted)
    }catch(err){
         console.error("something went wrong")
    }
      
}
9.create user (planing)
post: api/users/process-register -->1. fetch data from request body
                                    2. user exist
                                    3.creating jwt token (here i will put user info as token temporarily)
                                    4.prepare smpt server and email
                                    4.send email -token and frond-end url(where i will verify the user for example "http://localhost:3536/accountActivation")
                                    5.from user email account click and token will be send to frond-end page in unLink
after taking token from link , this token will be send to back-end express server
   for example this path api/user/verify
                                     1.receive token 
                                     2.verify token      
                                     3.fetch data from token
                                     5.finally store user to mongodb

controller for user crating path
const processRegister =async (req, res, next)=>{
    try{
        const {name , email, password, address,phone} = req.body;
        const userExist = await User.exists({email : email});
        const newUser = {
            name,
            email,
            password,
            address,
            phone
        }
        //create token
        const token = createWevToken(newUser ,jwtActivationKey(from secret.js file(i will create next time)),"10"(any time));
        //prepare email

        const emailData = {
            email : email,
            subject : "Account activation email",
            html :`
              <h2>Hello ${name}</h2>
              ------
              <p>please click here to <a href =`http://localhost:3536/accountActivation/${token}`>activate your account</a></p>
            `
        }
        try{
           await emailSendWithNodemailer(emailData);
        }catch(error){
              next(createError(500, "Failed to send verification email));
              return;
        }

       return res.status(200).json()
    }catch(error){
        next(error)
    }
}
creating token
jswWevToken.js in helper folder,
  const js =require('jsonwebtoken');
  const createWevToken = (payload, secretKey, expiresIn)=>{
     if(typeof payload !== "object" || !payload ){
        throw new Error("payload must be a not-empty object");
     }
     if(typeof secretKey !== "string" || secretKey === " "){
        throw new Error("secretKey must be a not-empty string");
     }
     try{
       const token = jwt.sign(payload, secretKey,{expiresIn})
      return = token; 
     } catch(error){
           console.error("Fail to sign the jwt ", error)
           throw error;
     }
      
  }
  module.exports = {createWevToken};

  * setup nodemailer.js in helper folder;
  const nodemailer = require("nodemailer");
try{
  const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com",
  port: 587,
  secure: false, // Use `true` for port 465, `false` for all other ports
  auth: {
    user: "maddison53@ethereal.email",(my email)
    pass: "jn7jnAPss4f63QBp6D", (my apppassword)
  },
  });

   const emailSendWithNodemailer = async (emailData)=>{
       
      const mailoptions   = {
    from: '"smptusername', // sender address
    to: "emailData.email", // list of receivers
    subject: emailData.subject, // Subject line
    text: "Hello world?", // plain text body(as you wish)
    html: emailData.html, // html body
    }

    }

    const info = await transporter.sendMail(mailoptions);
     console.log("Message sent: %s", info.messageId);
 }
catch(error){
  throw error;(we create error here);
}