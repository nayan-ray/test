           * git commit *

 commit - git commit -m "";
one file changes and if we not save the changes at any reason -git checkout the file name
commit and description - git commit -m "commit message" -m "description"
commit history - git log
one commit in details - git show commit id
in short, git history - git log --oneline
uncommit:{
   1.local repository to stagging area - git reset --soft HEAD^
   2.local repository to working directory - git reset --mixed HEAD^
   3.local repository to previous commit - git reset --hard HEAD^
}
$ delete locally commit and remotely === git reset --hard (locally) and git push origin -f (remotely)
one commit to another commit - git checkout commit id

one commit to master or latest commit - git checkout master

                * remote repository connection details *

# check remote connection-- --- git remote
# in details ---git remote -v
# change origin name --- git remote rename origin new-origin
# unlink remote repository link --- git remote rm origin
# link up local repository and remote repository --- git remote add origin(name) <remote repository url>
# change remote repository connection --- git remote set-url origin <remote repository url>
# first time push --- git push origin main  then only ===git push
# first time pull === git pull origin main  (any  branch name can be) then only ==git pull
             * cloning remote repository *
# copy remote repository to local repository ===== git clone <remote repository url>
# copy and first time push --- git push -u origin main ---next time push --- git push  (only)
# pull ----git pull

                      * branch *

* check branch --- git branch
* create branch --- git branch "branch name"
* one branch to another branch --- git checkout <branch name>
* we can not delete active branch
* locally delete branch --- git branch -d <branch name>
* remotely delete branch ---git push origin --delete <branch name
* create and switch branch --- git checkout -b "branch name"
* first time push --- git push -u origin <branch name> and next time only ---git push
* I have to merge from main branch but opposite to github
* locally merge --- git merge <branch name>
* then push --- git push -u origin main
* cloning single branch from many === git clone --single-branch -b "branch name" github url
             
             * Resolve conflict
current changes(main branch) ===git checkout --ours <branch name> 
Accept incoming changes === git checkout --theirs <branch name> 
abort merge(back)=== git merge --abort
Accept both changes = change manually
then add and push in main branch.           

              * git diff *

# difference between two commit --- git diff <commit id1> <commit id2> 
# after staging any file to see what is modified --- git diff --staged 
# after deleting any file to see what is deleted --- git diff
*  difference between two branch --- git diff <branch1> <branch2>  

           * add and reset from add *

 ^ specific file add === git add <filename> 
 ^ all changes add === git add .
 ^ un-stage one file === git reset <filename>
 ^ un-stage all added changes === git reset          

         % git head %

@ current head check === git show HEAD
@ after current head === git show HEAD~/^1  (2.3,4...)
@ one snapshot(commit) to another snapshot === git checkout <snapshotid>

           # git tag #

 * git tag are pointers to specific commit in a git repository
 git tag list show === git tag
 git tag add in a specific commit or head === git tag <pointers> example git tag v1 (lightweight tag)
 annotated tag === git tag -a <pointers> -n "message"
 add to remote repository === git push origin --tags
show specific tag === git show pointers
delete a tag === git tag -d pointers
remotely delete === git push origin --delete pointers 